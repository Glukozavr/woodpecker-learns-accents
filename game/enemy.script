-- Enemy logic

-- Generally chopping trees, when sees enemy - attacks it with cry, if in close range - attacks.
-- dies from attack from above by player. Can't jump.

go.property("ATTACK_DAMAGE", 1)
go.property("ATTACK_FORCE", 1000)
go.property("ATTACK_DELAY", 0.1)
go.property("CRY_ACCENT", 1)

local CRY_ACCENTS = {
	{ 0.5 },
	{ 0, 0, 0, 0.5 },
	{ 0, 0, 0, 0.3, 0, 0.5 },
}

-- pre-hashing ids improves performance
local CONTACT_POINT_RESPONSE = hash("contact_point_response")
local ANIMATION_DONE_RESPONSE = hash("animation_done")
local TRIGGER_RESPONSE = hash("trigger_response")

local GROUND = hash("ground")
local RESPAWMN = hash("respawn")
local PLAYER = hash("player")
local TREE = hash("tree")
local SPRITE = "#sprite"
local WAVE_FACTORY = "#wavefactory"
local LEVEL = "/level"

local SIGHT_ID = "#collisionsight"
local CRY_ID = "#collisioncry"
local FIGHT_ID = "#collisionfight"

local ANIM_RUN = hash("run")
local ANIM_IDLE = hash("idle")
local ANIM_CRY = hash("cry")
local ANIM_ATTACK = hash("attack")
local ANIM_DIE = hash("die")

-- Body commands and events
local RUN_COMMAND = hash("body_run") -- with value > 0 or < 0
local JUMP_COMMAND = hash("body_jump")
local ABORT_JUMP_COMMAND = hash("body_abort_jump")
local FALL_COMMAND = hash("body_fall")
local SET_DIRECTION_COMMAND = hash("body_set_direction")
local BODY_UPDATE = hash("body_update") -- with velocity, ground_contact, wall_contact
local BODY_JUMPED = hash("body_jumped")
local BODY_LANDED = hash("body_landed")
local BODY_FALLING = hash("body_falling")
-- Other commands and events
local DAMAGE_COMMAND = hash("apply_damage")
local PUSH_COMMAND = hash("apply_push")
local SEND_WAVE_COMMAND = hash("send_wave")
local DIE_COMMAND = hash("die")
local RESPAWN_COMMAND = hash("respawn") -- a command to unit to respawn
local REPORT_IN_COMMAND = hash("report_in") -- a command to register as unit
local REPORT_IN_TERMITE_COMMAND = hash("report_in_termite")
local REPORT_OUT_TERMITE_COMMAND = hash("report_out_termite")

local function get_direction(target)
	local pos = go.get_world_position()
	local target_pos = go.get_world_position(target)
	return (target_pos.x - pos.x)/math.abs(target_pos.x - pos.x)
end

local function play_sound(self, sound_comp)
	-- only play animations which are not already playing
	if self.sound ~= sound_comp then
		-- tell the sprite to play the animation
		self.sound_id = sound.play(sound_comp, nil, function(self, message_id, message, sender)
			if message.play_id == self.sound_id then
				self.sound = nil
				self.sound_id = nil
			end
		end)
		-- remember which animation is playing
		self.sound = sound_comp
	end
end

local function animation_action(self, anim, target)
	if anim == ANIM_ATTACK and target then
		msg.post(target, DAMAGE_COMMAND, { value = self.ATTACK_DAMAGE })
		msg.post(target, PUSH_COMMAND, { value = self.ATTACK_FORCE * get_direction(self.target) })
	elseif anim == ANIM_CRY and target then
		play_sound(self, "#wave")
		local pos = go.get_position()
		-- offset the wave so that it is fired "outside" of the enemy sprite
		local direction = get_direction(target)
		pos.x = pos.x + 8 * direction
		local id = factory.create(WAVE_FACTORY, pos)

		-- flip the wave sprite
		sprite.set_hflip(msg.url(nil, id, "sprite"), direction == 1)

		msg.post(id, SEND_WAVE_COMMAND, {
			direction = direction
		})
	end
end

local function play_animation(self, anim, target)
	-- only play animations which are not already playing
	if self.anim ~= anim and not self.busy then
		-- tell the sprite to play the animation
		sprite.play_flipbook(SPRITE, anim)
		-- remember which animation is playing
		self.anim = anim
		animation_action(self, anim, target)
		return true
	else
		return false
	end
end

local function update_animations(self, body)
	if self.dead then
		return
	end
	-- make sure the player character faces the right way
	sprite.set_hflip(SPRITE, body.direction == -1)

	if self.busy then
		return
	end
	-- make sure the right animation is playing
	if body.ground_contact then
		if body.velocity.x == 0 then
			play_animation(self, ANIM_IDLE)
		else
			play_animation(self, ANIM_RUN)
		end
	end
end

local function respawn(self)
	-- animation is perfrmed outside physics control
	self.busy = false
	-- the currently playing animation
	self.anim = nil
	-- If target in sight - focus on target, otherwise look for the trees
	self.target = nil
	-- If no target in sight and tree in sight - attack tree
	self.trees = {}
	if self.dead then
		self.dead = false
		msg.post(LEVEL, REPORT_IN_TERMITE_COMMAND)
	end
	self.ranges = {
		sight = false,
		cry = false,
		attack = false,
	}
	self.cry_index = 1
	go.set_position(self.spawn_position)
	play_animation(self, ANIM_IDLE)
end

function init(self)
	-- spawn position
	self.spawn_position = go.get_position()
	-- animation is perfrmed outside physics control
	self.busy = false
	-- the currently playing animation
	self.anim = nil
	-- If target in sight - focus on target, otherwise look for the trees
	self.target = nil
	-- If no target in sight and tree in sight - attack tree
	self.trees = {}
	self.dead = false
	self.ranges = {
		sight = false,
		cry = false,
		attack = false,
	}
	self.cry_index = 1
	self.cry_sequence = CRY_ACCENTS[self.CRY_ACCENT]
	play_animation(self, ANIM_IDLE)
	msg.post(LEVEL, REPORT_IN_COMMAND)
	msg.post(LEVEL, REPORT_IN_TERMITE_COMMAND)
end

local function follow(self, target)
	msg.post(".", RUN_COMMAND, { value = get_direction(target) })
end

local function cry(self, target)
	msg.post(".", SET_DIRECTION_COMMAND, { value = get_direction(target) })
	msg.post(".", RUN_COMMAND, { value = 0 })
	play_animation(self, ANIM_CRY, target)
end

local function attack(self, target)
	msg.post(".", RUN_COMMAND, { value = 0 })
	msg.post(".", SET_DIRECTION_COMMAND, { value = get_direction(target) })
	return play_animation(self, ANIM_ATTACK, target)
end

local function act(self)
	if self.dead then
		return
	end
	if self.target then
		if self.ranges.attack then
			if attack(self, self.target) then
				play_sound(self, "#bite")
			end
			self.busy = true
		elseif self.ranges.cry then
			cry(self, self.target)
			self.busy = true
		elseif self.ranges.sight then
			follow(self, self.target)
		end
	elseif table.getn(self.trees) > 0 then
		self.busy = false
		-- Go attack the tree
		local pos = go.get_world_position()
		local tree
		local distance = 1000
		for i=1,table.getn(self.trees) do
			local tree_pos = go.get_world_position(self.trees[i])
			local dist = math.abs(tree_pos.x - pos.x)
			if dist < distance then
				distance = dist
				tree = self.trees[i]
			end
		end
		if  distance < 5 then
			if attack(self, tree) then
				particlefx.play("#scrap")
			end
			self.busy = true
		else
			msg.post(".", RUN_COMMAND, { value = get_direction(tree) })
		end
	else
		self.busy = false
		-- Go somewhere till you find a tree
		msg.post(".", RUN_COMMAND, { value = 1 })
	end
end

local function define_range(self, sender, enter)
	if sender == msg.url(SIGHT_ID) then
		self.ranges.sight = enter
	elseif sender == msg.url(CRY_ID) then
		self.ranges.cry = enter
	elseif sender == msg.url(FIGHT_ID) then
		self.ranges.attack = enter
	end
end

function on_message(self, message_id, message, sender)
	if message_id == TRIGGER_RESPONSE then
		if message.other_group == PLAYER then
			define_range(self, sender, message.enter)
			if message.enter then
				self.target = message.other_id
			elseif sender == msg.url(SIGHT_ID) then 
				self.target = nil
			end
		elseif message.other_group == TREE then
			if message.enter then
				table.insert(self.trees, message.other_id)
			else
				for i=1,table.getn(self.trees) do
					if self.trees[i] == message.other_id then
						table.remove(self.trees, i)
						break
					end
				end
			end
		end
	elseif message_id == BODY_UPDATE then
		update_animations(self, message)
	elseif message_id == ANIMATION_DONE_RESPONSE then
		if message.id == ANIM_ATTACK or message.id == ANIM_CRY then
			local delay = 0
			if message.id == ANIM_ATTACK then
				delay = self.ATTACK_DELAY
			elseif message.id == ANIM_CRY then
				delay = self.cry_sequence[self.cry_index]

				local max_index = table.getn(self.cry_sequence)
				self.cry_index = self.cry_index + 1
				if self.cry_index > max_index then
					self.cry_index = 1
				end
			end
			timer.delay(delay, false, function()
				self.anim = nil
				self.busy = false
			end)
		end
	elseif message_id == DIE_COMMAND then
		play_animation(self, ANIM_DIE)
		play_sound(self, "#enemy_death")
		msg.post(LEVEL, REPORT_OUT_TERMITE_COMMAND)
		self.busy = false
		self.dead = true
	elseif message_id == RESPAWN_COMMAND then
		respawn(self)
	end
end

function update(self, dt)
	act(self)
end
	
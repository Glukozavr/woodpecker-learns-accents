-- Player logic

local CONTACT_POINT_RESPONSE = hash("contact_point_response")
local TRIGGER_RESPONSE = hash("trigger_response")
local SOUND_DONE = hash("sound_done")
local ENEMY = hash("enemy")
local RESPAWN = hash("respawn")
local HEAL = hash("heal")

local WAVE = hash("wave")
local LEFT = hash("left")
local RIGHT = hash("right")
local JUMP = hash("jump")
local ATTACK = hash("attack")

local ANIM_RUN = hash("run")
local ANIM_IDLE = hash("idle")
local ANIM_JUMP = hash("fly-up")
local ANIM_FLY = hash("fly")
local ANIM_LAND = hash("land")
local ANIM_ATTACK = hash("attack")
local ANIM_DAMAGE = hash("damage")

local SPRITE = "visuals#sprite"
local LEVEL = "/level"
local GUI = "/gui"

-- Body commands and events
local RUN_COMMAND = hash("body_run") -- with value > 0 or < 0
local JUMP_COMMAND = hash("body_jump")
local ABORT_JUMP_COMMAND = hash("body_abort_jump")
local FALL_COMMAND = hash("body_fall")
local PUSH_COMMAND = hash("body_push")
local SPEED_DEBUFF_COMMAND = hash("body_speed_debugg") -- expects value true or false
local BODY_UPDATE = hash("body_update") -- with velocity, ground_contact, wall_contact
local BODY_JUMPED = hash("body_jumped")
local BODY_LANDED = hash("body_landed")
local BODY_FALLING = hash("body_falling")
local BODY_RESTORED = hash("body_restored")
-- Other commands and events
local ENEMY_DAMAGE_COMMAND = hash("apply_damage")
local ENEMY_PUSH_COMMAND = hash("apply_push")
local DIE_COMMAND = hash("die")
local RESPAWN_COMMAND = hash("respawn") -- a command to unit to respawn
local REPORT_IN_COMMAND = hash("report_in") -- a command to register as unit
local RESPAWN_CALL_COMMAND = hash("respawn_call") -- a signal to start respawn
local REDUCE_HEALTH = hash("reduce_health") -- expects value
local REDUCE_SPEED = hash("reduce_speed") -- expects value true or false
local RESTORE_HEALTH = hash("restore_health")

local function play_animation(self, anim)
	-- only play animations which are not already playing
	if self.anim ~= anim then
		-- tell the sprite to play the animation
		sprite.play_flipbook(SPRITE, anim)
		-- remember which animation is playing
		self.anim = anim
	end
end

local function play_sound(self, sound_comp)
	-- only play animations which are not already playing
	if self.sound ~= sound_comp then
		-- tell the sprite to play the animation
		self.sound_id = sound.play(sound_comp, nil, function(self, message_id, message, sender)
			if message.play_id == self.sound_id then
				self.sound = nil
				self.sound_id = nil
			end
		end)
		-- remember which animation is playing
		self.sound = sound_comp
	end
end

local function update_animations(self, body)
	-- make sure the player character faces the right way
	sprite.set_hflip(SPRITE, body.direction == -1)
	self.direction = body.direction

	if self.is_busy then
		return
	end
	-- make sure the right animation is playing
	if body.ground_contact then
		if body.velocity.x == 0 then
			play_animation(self, ANIM_IDLE)
		else
			play_animation(self, ANIM_RUN)
			play_sound(self, "#step")
		end
	else
		if self.is_attacking then
			play_animation(self, ANIM_ATTACK)
		elseif body.velocity.y > 0 then
			play_animation(self, ANIM_FLY)
		end
	end
end

local function respawn(self)
	-- the currently playing animation
	self.anim = nil
	-- flag to monitor fly state
	self.is_flying = false
	-- flag to monitor falling state
	self.is_attacking = false
	-- internal animation in progress, do not update on physics
	self.is_busy = false
	self.speed_debuff = 0
	self.direction = 0

	self.sound = nil
	self.sound_id = nil

	go.set_position(self.spawn_position)
	play_animation(self, ANIM_IDLE)
end

function init(self)
	-- this lets us handle input in this script
	msg.post(".", "acquire_input_focus")

	-- activate camera attached to the player collection
	-- this will send camera updates to the render script
	msg.post("#camera", "acquire_camera_focus")
	msg.post("@render:", "use_camera_projection")

	-- spawn position
	self.spawn_position = go.get_position()
	-- the currently playing animation
	self.anim = nil
	-- flag to monitor fly state
	self.is_flying = false
	-- flag to monitor falling state
	self.is_attacking = false
	-- internal animation in progress, do not update on physics
	self.is_busy = false
	self.speed_debuff = 0
	self.direction = 0

	self.sound = nil
	self.sound_id = nil

	play_animation(self, ANIM_IDLE)
	msg.post(LEVEL, REPORT_IN_COMMAND)
end

local function squish()
	--go.animate("visuals", "scale.x", go.PLAYBACK_ONCE_PINGPONG, 0.8, go.EASING_INOUTQUAD, 0.6)
	--go.animate("visuals", "scale.y", go.PLAYBACK_ONCE_PINGPONG, 1.2, go.EASING_INOUTQUAD, 0.6)
end

local function unsquish()
	--go.set("visuals", "scale", 1)
end

function on_message(self, message_id, message, sender)
	if message_id == BODY_UPDATE then
		update_animations(self, message)
		self.is_flying = not message.ground_contact
		if self.is_attacking then
			self.is_attacking = not message.ground_contact
		end
	elseif message_id == BODY_JUMPED then
		play_animation(self, ANIM_JUMP)
		play_sound(self, "#jumping")
		-- compress and stretch player for visual "juice"
		squish()
	elseif message_id == BODY_LANDED then
		play_animation(self, ANIM_LAND)
		play_sound(self, "#land")
		-- reset any "squish" that may have been applied
		unsquish()
	elseif message_id == BODY_FALLING then
		self.is_attacking = true
		play_animation(self, ANIM_ATTACK)
		play_sound(self, "#attack")
	elseif message_id == ENEMY_DAMAGE_COMMAND then
		-- damage player, when he will get any lives
		msg.post(GUI, REDUCE_HEALTH, message)
		play_sound(self, "#damage")
	elseif message_id == ENEMY_PUSH_COMMAND then
		-- knock back player with message.value force
		msg.post(".", PUSH_COMMAND, message)
		self.is_busy = true
		play_animation(self, ANIM_DAMAGE)
	elseif message_id == BODY_RESTORED then
		self.is_busy = false
	elseif message_id == CONTACT_POINT_RESPONSE then
		if message.other_group == ENEMY and self.is_attacking then
			msg.post(message.other_id, DIE_COMMAND)
		elseif message.other_group == RESPAWN then
			msg.post(LEVEL, RESPAWN_CALL_COMMAND)
		end
	elseif message_id == RESPAWN_COMMAND then
		respawn(self)
	elseif message_id == REDUCE_SPEED then
		if message.value then
			self.speed_debuff = self.speed_debuff + 1
		else
			self.speed_debuff = self.speed_debuff - 1
		end
		msg.post(".", SPEED_DEBUFF_COMMAND, { value = self.speed_debuff > 0})
	elseif message_id == TRIGGER_RESPONSE then
		if message.other_group == HEAL and message.enter then
			msg.post(GUI, RESTORE_HEALTH, { value = 1 })
			play_sound(self, "#heal")
			go.delete(message.other_id)
		end
	end
end

function on_input(self, action_id, action)
	if action_id == LEFT then
		msg.post(".", RUN_COMMAND, { value = -action.value })
	elseif action_id == RIGHT then
		msg.post(".", RUN_COMMAND, { value = action.value })
	elseif action_id == JUMP then
		if action.pressed then
			msg.post(".", JUMP_COMMAND)
		elseif action.released then
			msg.post(".", ABORT_JUMP_COMMAND)
		end
	elseif action_id == ATTACK and action.pressed and self.is_flying then
		-- attack down only if in the air
		msg.post(".", FALL_COMMAND)
	end
end